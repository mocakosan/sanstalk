{"version":3,"file":"591.js","mappings":"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","sources":["webpack://sanstalk/./components/InviteChannelModal/index.tsx","webpack://sanstalk/./pages/Channel/index.tsx"],"sourcesContent":["import Modal from '@components/Modal';\nimport useInput from '@hooks/useInput';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport { IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport axios from 'axios';\nimport React, { FC, useCallback } from 'react';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  setShowInviteChannelModal: (flag: boolean) => void;\n}\nconst InviteChannelModal: FC<Props> = ({ show, onCloseModal, setShowInviteChannelModal }) => {\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\n  const { mutate: revalidateMembers } = useSWR<IUser[]>(\n    userData ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\n    fetcher,\n  );\n\n  const onInviteMember = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!newMember || !newMember.trim()) {\n        return;\n      }\n      axios\n        .post(`/api/workspaces/${workspace}/channels/${channel}/members`, {\n          email: newMember,\n        })\n        .then(() => {\n          revalidateMembers();\n          setShowInviteChannelModal(false);\n          setNewMember('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [channel, newMember, revalidateMembers, setNewMember, setShowInviteChannelModal, workspace],\n  );\n\n  return (\n    <Modal show={show} onCloseModal={onCloseModal}>\n      <form onSubmit={onInviteMember}>\n        <Label id=\"member-label\">\n          <span>채널 멤버 초대</span>\n          <Input id=\"member\" value={newMember} onChange={onChangeNewMember} />\n        </Label>\n        <Button type=\"submit\">초대하기</Button>\n      </form>\n    </Modal>\n  );\n};\n\nexport default InviteChannelModal;\n","import ChatBox from '@components/ChatBox';\nimport ChatList from '@components/ChatList';\nimport InviteChannelModal from '@components/InviteChannelModal';\nimport useInput from '@hooks/useInput';\nimport useSocket from '@hooks/useSocket';\nimport { DragOver } from '@pages/Channel/styles';\nimport { Header, Container } from '@pages/DM/styles';\nimport { IChannel, IChat, IDM, IUser } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport makeSection from '@utils/makeSection';\nimport axios from 'axios';\nimport { channel } from 'diagnostics_channel';\nimport gravatar from 'gravatar';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport useSWR from 'swr';\nimport useSWRInfinite from 'swr/infinite';\n\nconst PAGE_SIZE = 20;\nconst Channel = () => {\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\n  const [socket] = useSocket(workspace);\n  const { data: myData } = useSWR('/api/users', fetcher);\n  const {\n    data: chatData,\n    mutate: mutateChat,\n    setSize,\n  } = useSWRInfinite<IChat[]>(\n    (index) => `/api/workspaces/${workspace}/channels/${channel}/chats?perPage=${PAGE_SIZE}&page=${index + 1}`,\n    fetcher,\n    {\n      onSuccess(data) {\n        if (data?.length === 1) {\n          setTimeout(() => {\n            scrollbarRef.current?.scrollToBottom();\n          }, 100);\n        }\n      },\n    },\n  );\n  const { data: channelMembersData } = useSWR<IUser[]>(\n    myData ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\n    fetcher,\n  );\n  const { data: channelsData } = useSWR<IChannel[]>(`/api/workspaces/${workspace}/channels`, fetcher);\n  const channelData = channelsData?.find((v) => v.name === channel);\n  const [chat, onChangeChat, setChat] = useInput('');\n  const scrollbarRef = useRef<Scrollbars>(null);\n  const [dragOver, setDragOver] = useState(false);\n\n  const isEmpty = chatData?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < PAGE_SIZE);\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (chat?.trim() && chatData && channelData) {\n        const savedChat = chat;\n        mutateChat((prevChatData) => {\n          prevChatData?.[0].unshift({\n            id: (chatData[0][0]?.id || 0) + 1,\n            content: savedChat,\n            UserId: myData.id,\n            User: myData,\n            ChannelId: channelData.id,\n            Channel: channelData,\n            createdAt: new Date(),\n          });\n          return prevChatData;\n        }, false).then(() => {\n          // localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\n          setChat('');\n          if (scrollbarRef.current) {\n            console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n            scrollbarRef.current.scrollToBottom();\n          }\n        });\n        axios\n          .post(`/api/workspaces/${workspace}/channels/${channel}/chats`, {\n            content: chat,\n          })\n          .catch(console.error);\n      }\n    },\n    [chat, workspace, channel, myData, channelData, chatData, mutateChat, setChat],\n  );\n\n  const onClickInviteChannel = useCallback(() => {\n    setShowInviteChannelModal(true);\n  }, []);\n  const onCloseModal = useCallback(() => {\n    setShowInviteChannelModal(false);\n  }, []);\n\n  const onMessage = useCallback(\n    (data: IChat) => {\n      if (data.Channel.name === channel && data.UserId !== myData.id) {\n        mutateChat((chatData) => {\n          chatData?.[0].unshift(data);\n          return chatData;\n        }, false).then(() => {\n          if (scrollbarRef.current) {\n            if (\n              scrollbarRef.current.getScrollHeight() <\n              scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n            ) {\n              console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n              setTimeout(() => {\n                scrollbarRef.current?.scrollToBottom();\n              }, 100);\n            } else {\n              toast.success('새 메시지가 도착했습니다.', {\n                onClick() {\n                  scrollbarRef.current?.scrollToBottom();\n                },\n                closeOnClick: true,\n              });\n            }\n          }\n        });\n      }\n    },\n    [channel, myData],\n  );\n\n  useEffect(() => {\n    socket?.on('message', onMessage);\n    return () => {\n      socket?.off('message', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  // useEffect(() => {\n  //   localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\n  // }, [workspace, id]);\n\n  // const onDrop = useCallback(\n  //   (e) => {\n  //     e.preventDefault();\n  //     console.log(e);\n  //     const formData = new FormData();\n  //     if (e.dataTransfer.items) {\n  //       // Use DataTransferItemList interface to access the file(s)\n  //       for (let i = 0; i < e.dataTransfer.items.length; i++) {\n  //         // If dropped items aren't files, reject them\n  //         if (e.dataTransfer.items[i].kind === 'file') {\n  //           const file = e.dataTransfer.items[i].getAsFile();\n  //           console.log('... file[' + i + '].name = ' + file.name);\n  //           formData.append('image', file);\n  //         }\n  //       }\n  //     } else {\n  //       // Use DataTransfer interface to access the file(s)\n  //       for (let i = 0; i < e.dataTransfer.files.length; i++) {\n  //         console.log('... file[' + i + '].name = ' + e.dataTransfer.files[i].name);\n  //         formData.append('image', e.dataTransfer.files[i]);\n  //       }\n  //     }\n  //     axios.post(`/api/workspaces/${workspace}/dms/${id}/images`, formData).then(() => {\n  //       setDragOver(false);\n  //       localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\n  //       mutateChat();\n  //     });\n  //   },\n  //   [workspace, id, mutateChat],\n  // );\n\n  // const onDragOver = useCallback((e) => {\n  //   e.preventDefault();\n  //   console.log(e);\n  //   setDragOver(true);\n  // }, []);\n\n  if (!myData || !myData) {\n    return null;\n  }\n\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\n\n  return (\n    <Container>\n      <Header>\n        <span>#{channel}</span>\n        <div className=\"header-right\">\n          <span>{channelMembersData?.length}</span>\n          <button\n            onClick={onClickInviteChannel}\n            className=\"c-button-unstyled p-ia__view_header__button\"\n            aria-label=\"Add people to #react-native\"\n            data-sk=\"tooltip_parent\"\n            type=\"button\"\n          >\n            <i className=\"c-icon p-ia__view_header__button_icon c-icon--add-user\" aria-hidden=\"true\" />\n          </button>\n        </div>\n      </Header>\n      <ChatList\n        scrollbarRef={scrollbarRef}\n        isReachingEnd={isReachingEnd}\n        isEmpty={isEmpty}\n        chatSections={chatSections}\n        setSize={setSize}\n      />\n      <ChatBox\n        onSubmitForm={onSubmitForm}\n        chat={chat}\n        onChangeChat={onChangeChat}\n        placeholder={`Message ${myData.nickname}`}\n        data={[]}\n      />\n      <InviteChannelModal\n        show={showInviteChannelModal}\n        onCloseModal={onCloseModal}\n        setShowInviteChannelModal={setShowInviteChannelModal}\n      />\n      {/* {dragOver && <DragOver>업로드!</DragOver>} */}\n    </Container>\n  );\n};\n\nexport default Channel;\n"],"names":["_ref","show","onCloseModal","setShowInviteChannelModal","_useParams","useParams","workspace","channel","_useInput2","useInput","newMember","onChangeNewMember","setNewMember","userData","useSWR","fetcher","data","revalidateMembers","concat","mutate","onInviteMember","useCallback","e","preventDefault","trim","axios","email","then","catch","error","_error$response","console","dir","toast","response","position","React","Modal","onSubmit","Label","id","Input","value","onChange","Button","type","_chatData$","_chatData","_useState2","_slicedToArray","useState","showInviteChannelModal","socket","useSocket","myData","_useSWRInfinite","useSWRInfinite","index","onSuccess","length","setTimeout","_scrollbarRef$current","scrollbarRef","current","scrollToBottom","chatData","mutateChat","setSize","channelMembersData","channelsData","channelData","find","v","name","chat","onChangeChat","setChat","useRef","_useState4","isEmpty","isReachingEnd","onSubmitForm","savedChat","prevChatData","_chatData$0$","unshift","content","UserId","User","ChannelId","Channel","createdAt","Date","_scrollbarRef$current2","log","getValues","onClickInviteChannel","onMessage","_scrollbarRef$current3","getScrollHeight","getClientHeight","getScrollTop","_scrollbarRef$current4","onClick","_scrollbarRef$current5","closeOnClick","useEffect","on","off","chatSections","makeSection","flat","reverse","Container","Header","className","ChatList","ChatBox","placeholder","nickname","InviteChannelModal"],"sourceRoot":""}