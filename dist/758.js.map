{"version":3,"file":"758.js","mappings":"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","sources":["webpack://sanstalk/./components/ChatBox/styles.tsx","webpack://sanstalk/./components/ChatBox/index.tsx","webpack://sanstalk/./components/Chat/styles.tsx","webpack://sanstalk/./components/Chat/index.tsx","webpack://sanstalk/./components/ChatList/styles.tsx","webpack://sanstalk/./components/ChatList/index.tsx","webpack://sanstalk/./pages/DM/styles.tsx","webpack://sanstalk/./utils/makeSection.ts"],"sourcesContent":["import styled from '@emotion/styled';\nimport { MentionsInput } from 'react-mentions';\n\nexport const ChatArea = styled.div`\n  display: flex;\n  width: 100%;\n  padding: 20px;\n  padding-top: 0;\n`;\n\nexport const Form = styled.form`\n  color: rgb(29, 28, 29);\n  font-size: 15px;\n  width: 100%;\n  border-radius: 4px;\n  border: 1px solid rgb(29, 28, 29);\n`;\n\nexport const MentionsTextarea = styled(MentionsInput)`\n  font-family: Slack-Lato, appleLogo, sans-serif;\n  font-size: 15px;\n  padding: 8px 9px;\n  width: 100%;\n  & strong {\n    background: skyblue;\n  }\n  & textarea {\n    height: 44px;\n    padding: 9px 10px !important;\n    outline: none !important;\n    border-radius: 4px !important;\n    resize: none !important;\n    line-height: 22px;\n    border: none;\n  }\n  & ul {\n    border: 1px solid lightgray;\n    max-height: 200px;\n    overflow-y: auto;\n    padding: 9px 10px;\n    background: white;\n    border-radius: 4px;\n    width: 150px;\n  }\n`;\n\nexport const Toolbox = styled.div`\n  position: relative;\n  background: rgb(248, 248, 248);\n  height: 41px;\n  display: flex;\n  border-top: 1px solid rgb(221, 221, 221);\n  align-items: center;\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n`;\n\nexport const SendButton = styled.button`\n  position: absolute;\n  right: 5px;\n  top: 5px;\n`;\n\nexport const EachMention = styled.button<{ focus: boolean }>`\n  padding: 4px 20px;\n  background: transparent;\n  border: none;\n  display: flex;\n  align-items: center;\n  color: rgb(28, 29, 28);\n  width: 100%;\n  & img {\n    margin-right: 5px;\n  }\n  ${({ focus }) =>\n    focus &&\n    `\n    background: #1264a3;\n    color: white;\n  `};\n`;\n","import { ChatArea, EachMention, Form, MentionsTextarea, SendButton, Toolbox } from '@components/ChatBox/styles';\nimport React, { VFC, useCallback, useEffect, useRef } from 'react';\nimport autosize from 'autosize';\nimport { Mention, SuggestionDataItem } from 'react-mentions';\nimport { IUser, IUserWithOnline } from '@typings/db';\nimport fetcher from '@utils/fetcher';\nimport useSWR from 'swr';\nimport { useParams } from 'react-router';\nimport gravatar from 'gravatar';\n\ninterface Props {\n  chat: string;\n  onSubmitForm: (e: any) => void;\n  onChangeChat: (e: any) => void;\n  placeholder?: string;\n  data?: IUser[];\n}\n\nconst ChatBox: VFC<Props> = ({ chat, onSubmitForm, onChangeChat, placeholder, data }) => {\n  const { workspace } = useParams<{ workspace: string }>();\n  const { data: userData } = useSWR('/api/users', fetcher, {\n    dedupingInterval: 2000,\n  });\n  const { data: memberData } = useSWR<IUserWithOnline[]>(\n    userData ? `/api/workspaces/${workspace}/members` : null,\n    fetcher,\n  );\n  // null을 넣어주면 ref에러가 없어짐\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  useEffect(() => {\n    if (textareaRef.current) {\n      autosize(textareaRef.current);\n    }\n  }, []);\n  const onKeydownChat = useCallback(\n    (e) => {\n      console.log(e);\n      if (e.key === 'Enter') {\n        if (!e.shitfkey) {\n          e.preventDefault();\n          onSubmitForm(e);\n        }\n      }\n    },\n    [onSubmitForm],\n  );\n  const renderSuggestion = useCallback(\n    (\n      suggestion: SuggestionDataItem,\n      search: string,\n      highlightedDisplay: React.ReactNode,\n      index: number,\n      focus: boolean,\n    ): React.ReactNode => {\n      if (!memberData) return;\n      return (\n        <EachMention focus={focus}>\n          <img\n            src={gravatar.url(memberData[index].email, { s: '20px', d: 'retro' })}\n            alt={memberData[index].nickname}\n          />\n          <span>{highlightedDisplay}</span>\n        </EachMention>\n      );\n    },\n    [memberData],\n  );\n  return (\n    <ChatArea>\n      <Form onSubmit={onSubmitForm}>\n        <MentionsTextarea\n          id=\"editor-chat\"\n          value={chat}\n          onChange={onChangeChat}\n          onKeyDown={onKeydownChat}\n          placeholder={placeholder}\n          inputRef={textareaRef}\n          forceSuggestionsAboveCursor\n        >\n          <Mention\n            appendSpaceOnAdd\n            trigger=\"@\"\n            data={memberData?.map((v) => ({ id: v.id, display: v.nickname })) || []}\n            renderSuggestion={renderSuggestion}\n          ></Mention>\n        </MentionsTextarea>\n        <Toolbox>\n          <SendButton\n            className={\n              'c-button-unstyled c-icon_button c-icon_button--light c-icon_button--size_medium c-texty_input__button c-texty_input__button--send' +\n              (chat?.trim() ? '' : ' c-texty_input__button--disabled')\n            }\n            data-qa=\"texty_send_button\"\n            aria-label=\"Send message\"\n            data-sk=\"tooltip_parent\"\n            type=\"submit\"\n            disabled={!chat?.trim()}\n          >\n            <i className=\"c-icon c-icon--paperplane-filled\" aria-hidden=\"true\" />\n          </SendButton>\n        </Toolbox>\n      </Form>\n    </ChatArea>\n  );\n};\n\nexport default ChatBox;\n","import styled from '@emotion/styled';\n\nexport const ChatWrapper = styled.div`\n  display: flex;\n  padding: 8px 20px;\n\n  &:hover {\n    background: #eee;\n  }\n\n  & .chat-img {\n    display: flex;\n    width: 36px;\n    margin-right: 8px;\n\n    & img {\n      width: 36px;\n      height: 36px;\n    }\n  }\n\n  & .chat-text {\n    display: flex;\n    flex-wrap: wrap;\n    flex: 1;\n\n    & p {\n      flex: 0 0 100%;\n      margin: 0;\n    }\n  }\n\n  & .chat-user {\n    display: flex;\n    flex: 0 0 100%;\n    align-items: center;\n\n    & > b {\n      margin-right: 5px;\n    }\n\n    & > span {\n      font-size: 12px;\n    }\n  }\n\n  & a {\n    text-decoration: none;\n    color: deepskyblue;\n  }\n`;\n","import { IChat, IDM, IUser } from '@typings/db';\nimport React, { FC, memo, useMemo } from 'react';\nimport { ChatWrapper } from './styles';\nimport gravatar from 'gravatar';\nimport dayjs from 'dayjs';\nimport regexifyString from 'regexify-string';\nimport { Link, useParams } from 'react-router-dom';\n\ninterface Props {\n  data: IDM | IChat;\n}\n\nconst Chat: FC<Props> = memo(({ data }) => {\n  const { workspace } = useParams<{ workspace: string; channel: string }>();\n  //data안에 Sender라는 키가 있음\n  const user: IUser = 'Sender' in data ? data.Sender : data.User;\n\n  //@[이름](id)\n  // \\d 숫자 , + 는 1개이상, ?는 0개나1개, *이 0개 이상\n  //useMemo : 개별 훅스값 캐싱\n  //memo 부모 컴포넌트가 바뀌어도 자식 컴포넌트는 props가 바뀌지 않는이상 바뀌지 않는다\n  const result = useMemo(\n    () =>\n      regexifyString({\n        pattern: /@\\[(.+?)]\\((\\d+?)\\)|\\n/g,\n        decorator(match, index) {\n          const arr = match.match(/@\\[(.+?)]\\((\\d+?)\\)/)!;\n          if (arr) {\n            return (\n              <Link key={match + index} to={`/workspace/${workspace}/dm/${arr[2]}`}>\n                @{arr[1]}\n              </Link>\n            );\n          }\n          return <br key={index} />;\n        },\n        input: data.content,\n      }),\n    [data.content, workspace],\n  );\n\n  return (\n    <ChatWrapper>\n      <div className=\"chat-img\">\n        <img src={gravatar.url(user.email, { s: '36px', d: 'retro' })} alt={user.nickname} />\n      </div>\n      <div className=\"chat-text\">\n        <div className=\"chat-user\">\n          <b>{user.nickname}</b>\n          <span>{dayjs(data.createdAt).format('h:mm A')}</span>\n        </div>\n        <p>{result}</p>\n      </div>\n    </ChatWrapper>\n  );\n});\n\nexport default Chat;\n","import styled from '@emotion/styled';\n\nexport const ChatZone = styled.div`\n  width: 100%;\n  display: flex;\n  flex: 1;\n`;\n\nexport const Section = styled.section`\n  margin-top: 20px;\n  border-top: 1px solid #eee;\n`;\n\nexport const StickyHeader = styled.div`\n  display: flex;\n  justify-content: center;\n  flex: 1;\n  width: 100%;\n  position: sticky;\n  top: 14px;\n  & button {\n    font-weight: bold;\n    font-size: 13px;\n    height: 28px;\n    line-height: 27px;\n    padding: 0 16px;\n    z-index: 2;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 1px 3px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 24px;\n    position: relative;\n    top: -13px;\n    background: white;\n    border: none;\n    outline: none;\n  }\n`;\n","import Chat from '@components/Chat';\nimport { ChatZone, Section, StickyHeader } from '@components/ChatList/styles';\nimport { IChat, IDM } from '@typings/db';\nimport React, { ForwardedRef, RefObject, forwardRef, useCallback, FC } from 'react';\nimport { Scrollbars } from 'react-custom-scrollbars';\n\ninterface Props {\n  scrollbarRef: RefObject<Scrollbars>;\n  isReachingEnd?: boolean;\n  isEmpty: boolean;\n  chatSections: { [key: string]: (IDM | IChat)[] };\n  setSize: (f: (size: number) => number) => Promise<(IDM | IChat)[][] | undefined>;\n}\n\nconst ChatList: FC<Props> = ({ scrollbarRef, isReachingEnd, isEmpty, chatSections, setSize }) => {\n  const onScroll = useCallback(\n    (values) => {\n      if (values.scrollTop === 0 && !isReachingEnd && !isEmpty) {\n        setSize((size) => size + 1).then(() => {\n          scrollbarRef.current?.scrollTop(scrollbarRef.current?.getScrollHeight() - values.scrollHeight);\n        });\n      }\n    },\n    [setSize, scrollbarRef, isReachingEnd, isEmpty],\n  );\n  console.log('chatSections', chatSections);\n  return (\n    <ChatZone>\n      <Scrollbars autoHide ref={scrollbarRef} onScrollFrame={onScroll}>\n        {Object.entries(chatSections).map(([date, chats]) => {\n          return (\n            <Section className={`section-${date}`} key={date}>\n              <StickyHeader>\n                <button>{date}</button>\n              </StickyHeader>\n              {chats.map((chat) => (\n                <Chat key={chat.id} data={chat} />\n              ))}\n            </Section>\n          );\n        })}\n      </Scrollbars>\n    </ChatZone>\n  );\n};\n\nexport default ChatList;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n  position: relative;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n  & img {\n    margin-right: 5px;\n  }\n`;\n\nexport const DragOver = styled.div`\n  position: absolute;\n  top: 64px;\n  left: 0;\n  width: 100%;\n  height: calc(100% - 64px);\n  background: white;\n  opacity: 0.7;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 40px;\n`;\n","import { IDM, IChat } from '@typings/db';\nimport dayjs from 'dayjs';\n\nexport default function makeSection(chatList: (IChat | IDM)[]) {\n  const sections: { [key: string]: (IChat | IDM)[] } = {};\n  chatList.forEach((chat) => {\n    const monthDate = dayjs(chat.createdAt).format('YYYY-MM-DD');\n    if (Array.isArray(sections[monthDate])) {\n      sections[monthDate].push(chat);\n    } else {\n      sections[monthDate] = [chat];\n    }\n  });\n  return sections;\n}\n"],"names":["ChatArea","_styled","target","name","styles","Form","MentionsTextarea","MentionsInput","Toolbox","SendButton","EachMention","_ref","focus","chat","onSubmitForm","onChangeChat","placeholder","workspace","data","useParams","userData","useSWR","fetcher","dedupingInterval","memberData","concat","textareaRef","useRef","useEffect","current","autosize","onKeydownChat","useCallback","e","console","log","key","shitfkey","preventDefault","renderSuggestion","suggestion","search","highlightedDisplay","index","React","src","gravatar","email","s","d","alt","nickname","onSubmit","id","value","onChange","onKeyDown","inputRef","forceSuggestionsAboveCursor","Mention","appendSpaceOnAdd","trigger","map","v","display","className","trim","type","disabled","ChatWrapper","memo","user","Sender","User","result","useMemo","regexifyString","pattern","decorator","match","arr","Link","to","input","content","dayjs","createdAt","format","ChatZone","Section","StickyHeader","scrollbarRef","isReachingEnd","isEmpty","chatSections","setSize","onScroll","values","scrollTop","size","then","_scrollbarRef$current","_scrollbarRef$current2","getScrollHeight","scrollHeight","Scrollbars","autoHide","ref","onScrollFrame","Object","entries","_ref2","_ref3","date","chats","Chat","Container","Header","makeSection","chatList","sections","forEach","monthDate","Array","isArray","push"],"sourceRoot":""}