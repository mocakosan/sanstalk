{"version":3,"file":"68.js","mappings":"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","sources":["webpack://sanstalk/./pages/DM/index.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useRef } from 'react';\nimport { Container, Header } from '@pages/DM/styles';\nimport gravata from 'gravatar';\nimport fetcher from '@utils/fetcher';\nimport useSWR from 'swr';\nimport useSWRInfinite from 'swr/infinite';\nimport { useParams } from 'react-router';\nimport ChatBox from '@components/ChatBox';\nimport ChatList from '@components/ChatList';\nimport useInput from '@hooks/useInput';\nimport axios from 'axios';\nimport { IDM } from '@typings/db';\nimport makeSection from '@utils/makeSection';\nimport Scrollbars from 'react-custom-scrollbars';\nimport useSocket from '@hooks/useSocket';\n\nconst PAGE_SIZE = 20;\nconst DM = () => {\n  const { workspace, id } = useParams<{ workspace: string; id: string }>();\n  //소켓 연결\n  const [socket] = useSocket(workspace);\n  const { data: userData } = useSWR(`/api/workspaces/${workspace}/users/${id}`, fetcher);\n  const { data: myData } = useSWR('/api/users', fetcher);\n  //채팅을 받아오는 api\n  const {\n    data: chatData,\n    mutate: mutateChat,\n    setSize,\n  } = useSWRInfinite<IDM[]>(\n    (index) => `/api/workspaces/${workspace}/dms/${id}/chats?perPage=${PAGE_SIZE}&page=${index + 1}`,\n    fetcher,\n    {\n      onSuccess(data) {\n        if (data?.length === 1) {\n          setTimeout(() => {\n            scrollbarRef.current?.scrollToBottom();\n          }, 100);\n        }\n      },\n    },\n  );\n\n  const [chat, onChangeChat, setChat] = useInput('');\n  const scrollbarRef = useRef<Scrollbars>(null);\n\n  //인피니티 스크롤\n  const isEmpty = chatData?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\n  //채팅 등록\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (chat?.trim() && chatData) {\n        //딜레이 없애는것\n        const savedChat = chat;\n        mutateChat((prevChatData) => {\n          prevChatData?.[0].unshift({\n            id: (chatData[0][0]?.id || 0) + 1,\n            content: savedChat,\n            SenderId: myData.id,\n            Sender: myData,\n            ReceiverId: userData.id,\n            Receiver: userData,\n            createdAt: new Date(),\n          });\n          return prevChatData;\n        }, false).then(() => {\n          //채팅 등록한다음에 채팅창 글자지우기\n          setChat('');\n          //채팅치는순간 밑으로 내려가게\n          if (scrollbarRef.current) {\n            console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n            scrollbarRef.current.scrollToBottom();\n          }\n        });\n        axios\n          .post(`/api/workspaces/${workspace}/dms/${id}/chats`, {\n            content: chat,\n          })\n          // .then(() => {\n          //   mutateChat();\n          // })\n          .catch(console.error);\n      }\n    },\n    [chat, workspace, id, myData, userData, chatData, mutateChat, setChat],\n  );\n\n  const onMessage = useCallback(\n    (data: IDM) => {\n      // id는 상대방 아이디\n      if (data.SenderId === Number(id) && myData.id !== Number(id)) {\n        mutateChat((chatData) => {\n          //가장 최신 배열에 가장 최신 데이터\n          chatData?.[0].unshift(data);\n          return chatData;\n        }, false).then(() => {\n          //내가 채팅을 보고 있는데 상대방이 채팅을 쳐도 안내려가게 150px 기준\n          if (scrollbarRef.current) {\n            if (\n              scrollbarRef.current.getScrollHeight() <\n              scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n            ) {\n              console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n              setTimeout(() => {\n                scrollbarRef.current?.scrollToBottom();\n              }, 50);\n            }\n          }\n        });\n      }\n    },\n    [id, mutateChat, myData],\n  );\n\n  useEffect(() => {\n    socket?.on('dm', onMessage);\n    return () => {\n      socket?.off('dm', onMessage);\n    };\n  }, [socket, onMessage]);\n\n  //로딩 시 스크롤바 제일 아래로\n  useEffect(() => {\n    if (chatData?.length === 1) {\n      scrollbarRef.current?.scrollToBottom();\n    }\n  }, [chatData]);\n\n  if (!userData || !myData) {\n    return null;\n  }\n\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\n  console.log('content', chatSections);\n  return (\n    <Container>\n      <Header>\n        <img src={gravata.url(userData.email, { s: '24px', d: 'retro' })} alt={userData.nickname} />\n        <span>{userData.nickname}</span>\n      </Header>\n      <ChatList\n        chatSections={chatSections}\n        scrollbarRef={scrollbarRef}\n        setSize={setSize}\n        isReachingEnd={isReachingEnd}\n        isEmpty={isEmpty}\n      />\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} data={[]} />\n    </Container>\n  );\n};\nexport default DM;\n"],"names":["_chatData$","_chatData","_useParams","useParams","workspace","id","socket","_slicedToArray","useSocket","userData","useSWR","concat","fetcher","data","myData","_useSWRInfinite","useSWRInfinite","index","onSuccess","length","setTimeout","_scrollbarRef$current","scrollbarRef","current","scrollToBottom","chatData","mutateChat","mutate","setSize","_useInput2","useInput","chat","onChangeChat","setChat","useRef","isEmpty","isReachingEnd","onSubmitForm","useCallback","e","preventDefault","trim","savedChat","prevChatData","_chatData$0$","unshift","content","SenderId","Sender","ReceiverId","Receiver","createdAt","Date","then","_scrollbarRef$current2","console","log","getValues","axios","catch","error","onMessage","Number","_scrollbarRef$current3","getScrollHeight","getClientHeight","getScrollTop","_scrollbarRef$current4","useEffect","on","off","_scrollbarRef$current5","chatSections","makeSection","flat","reverse","React","Container","Header","src","gravata","email","s","d","alt","nickname","ChatList","ChatBox"],"sourceRoot":""}